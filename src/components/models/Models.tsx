/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useEffect, useRef } from "react";
import { GLTFResult,GlbModelProps } from "../../types/global";
import { useFrame } from "@react-three/fiber";

useGLTF.preload("models/Avatar.glb");
useGLTF.preload("models/blender.glb");
useGLTF.preload("models/cs.glb");
useGLTF.preload("models/css.glb");
useGLTF.preload("models/fb.glb");
useGLTF.preload("models/gh.glb");
useGLTF.preload("models/html.glb");
useGLTF.preload("models/js.glb");
useGLTF.preload("models/react.glb");
useGLTF.preload("models/tailwind.glb");
useGLTF.preload("models/ts.glb");

export function Avatar({position}:GlbModelProps) {
  const groupRef = useRef<any>();
  const { nodes, materials } = useGLTF("models/Avatar.glb") as GLTFResult;

  const { animations: float } = useFBX("/animations/Falling.fbx");
  float[0].name = "Falling";

  const { actions } = useAnimations(float, groupRef);
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.z += 0.01;
    }
  });
  useEffect(() => {
    actions["Falling"]?.reset().play();
    return () => {
      actions["Falling"]?.reset();
    };
  }, []);

  return (
    <group
      
      dispose={null}
      ref={groupRef}
      rotation-x={-1.8}
      rotation-z={0.9}
      position={position}
      scale={0.8}
    >
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Headwear.geometry}
        material={materials.Wolf3D_Headwear}
        skeleton={nodes.Wolf3D_Headwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Outfit_Top.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Outfit_Top.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Outfit_Bottom.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Outfit_Bottom.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        morphTargetDictionary={
          nodes.Wolf3D_Outfit_Footwear.morphTargetDictionary
        }
        morphTargetInfluences={
          nodes.Wolf3D_Outfit_Footwear.morphTargetInfluences
        }
      />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Body.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Body.morphTargetInfluences}
      />
    </group>
  );
}

export function Blender({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/blender.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.03;
      groupRef.current.rotation.z += 0.03;
    }
  });
  return (
    <group
      dispose={null}
      position={position}
      scale={3}
      ref={groupRef}
    >
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.back.geometry}
          material={materials["back.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO.geometry}
          material={materials["logo.001"]}
          position={[0.899, 0.649, 0.334]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO_1.geometry}
          material={materials.logo_1}
          position={[0.031, 0.649, 0.025]}
        />
      </group>
    </group>
  );
}

export function Cs({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/cs.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.03;
      groupRef.current.rotation.z += 0.03;
    }
  });
  return (
    <group
      
      dispose={null}
      ref={groupRef}
      rotation-x={-1.8}
      rotation-z={0.9}
      position={position}
      scale={3}
    >
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.back.geometry}
          material={materials.back}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO.geometry}
          material={materials.logo}
          position={[1.05, 0.556, 0.006]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO_1.geometry}
          material={materials.logo_1}
          position={[-0.23, 0.573, 0.009]}
        />
      </group>
    </group>
  );
}

export function Css({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/css.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y -= 0.03;
      groupRef.current.rotation.z -= 0.03;
    }
  });
  return (
    <group position={position} dispose={null} ref={groupRef} scale={3}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Curve002.geometry}
        material={materials["SVGMat.002"]}
        position={[-0.025, 0.06, -0.018]}
        rotation={[Math.PI / 2, 0.181, -Math.PI / 2]}
        scale={0.735}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Curve.geometry}
        material={materials["Material.007"]}
        position={[-0.03, 0.046, -0.018]}
        rotation={[Math.PI / 2, 0.191, -Math.PI / 2]}
      />
    </group>
  );
}

export function Facebook({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/fb.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y -= 0.01;
      groupRef.current.rotation.x += 0.01;
    }
  });
  return (
    <group
      
      dispose={null}
      position={position}
      scale={0.2}
      ref={groupRef}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001.geometry}
        material={materials["Material.001"]}
        position={[-0.962, 2.709, 0.313]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube002.geometry}
        material={materials["Material.002"]}
        position={[-1.017, 2.219, 0.626]}
      />
    </group>
  );
}

export function Github({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/gh.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y -= 0.03;
      groupRef.current.rotation.x -= 0.001;
    }
  });
  return (
    <group
      
      dispose={null}
      scale={0.2}
      position={position}
      ref={groupRef}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder002.geometry}
        material={materials["Material Purple.002"]}
        position={[0.026, 0.046, -0.111]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={3.602}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Curve001.geometry}
        material={materials["Material White.001"]}
        position={[-0.046, -0.082, 0.197]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[290.005, 209.812, 290.005]}
      />
    </group>
  );
}

export function HtmlModel({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/html.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.03;
      groupRef.current.rotation.x += 0.01;
      groupRef.current.rotation.z += 0.01;
    }
  });
  return (
    <group position={position} dispose={null} ref={groupRef} scale={0.08}>
      <group position={[0, 3.953, 0]} scale={2.24}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube019.geometry}
          material={materials.Orange}
          position={[-0.014, -0.146, -0.131]}
          scale={1.693}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube020.geometry}
          material={materials.White}
          position={[-0.171, -0.226, 0.139]}
        />
      </group>
    </group>
  );
}

export function Javascript({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/js.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.03;
      groupRef.current.rotation.x += 0.01;
    }
  });
  return (
    <group
      
      dispose={null}
      position={position}
      scale={3}
      ref={groupRef}
    >
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.back.geometry}
          material={materials.back}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO.geometry}
          material={materials.logo}
          position={[0.534, 0.4, 0.996]}
        />
      </group>
    </group>
  );
}

export function React({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/react.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y -= 0.05;
      groupRef.current.rotation.z += 0.01;
      groupRef.current.rotation.x += 0.01;
    }
  });
  return (
    <group position={position} dispose={null} ref={groupRef} scale={3}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.back.geometry}
          material={materials["back.004"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO.geometry}
          material={materials["logo.004"]}
          position={[-0.003, 0.648, 0.006]}
        />
      </group>
    </group>
  );
}

export function Tailwind({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/tailwind.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y -= 0.05;
      groupRef.current.rotation.z -= 0.03;
    }
  });
  return (
    <group
      
      dispose={null}
      position={position}
      scale={3}
      ref={groupRef}
    >
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.back.geometry}
          material={materials["back.003"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO.geometry}
          material={materials["logo.003"]}
          position={[-0.003, 0.657, 0.009]}
        />
      </group>
    </group>
  );
}

export function Typescript({position}:GlbModelProps) {
  const { nodes, materials } = useGLTF("models/ts.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.03;
      groupRef.current.rotation.x -= 0.01;
      groupRef.current.rotation.z -= 0.02;
    }
  });
  return (
    <group
      
      dispose={null}
      position={position}
      scale={3}
      ref={groupRef}
    >
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.back.geometry}
          material={materials["back.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO.geometry}
          material={materials["logo.002"]}
          position={[0.534, 0.644, 0.996]}
        />
      </group>
    </group>
  );
}
