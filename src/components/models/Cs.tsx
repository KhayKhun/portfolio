/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { GLTFResult } from "../../types/global";
import { useFrame } from "@react-three/fiber";
import { useRef } from "react";

export function Cs(props:any) {
  const { nodes, materials } = useGLTF("models/cs.glb") as GLTFResult;
  const groupRef = useRef<any>();
  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.03;
      groupRef.current.rotation.z += 0.03;
    }
  });
  return (
    <group
      {...props}
      dispose={null}
      ref={groupRef}
      rotation-x={-1.8}
      rotation-z={0.9}
      position={props.position}
      scale={3}
    >
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.back.geometry}
          material={materials.back}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO.geometry}
          material={materials.logo}
          position={[1.05, 0.556, 0.006]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LOGO_1.geometry}
          material={materials.logo_1}
          position={[-0.23, 0.573, 0.009]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/cs.glb");
